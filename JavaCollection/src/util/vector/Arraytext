===== java.util.ArrayList =====
-Object 배열을 이용해서 데이터를 순차적으로 저장하는 공간
-첫번째 공간은 인덱스 0 번을 갖는다(배열과 동일)
-공간 확장 방식은 Vector 와 동일하다

===== Vector vs. ArrayList =====
-Vector 는 멀티스래드에 대한 동기화가 되어 있으나
-ArrayList는 동기화가 되어 있지 않다.

===== ArrayList 안의 특징 =====
비동기화된 컬렉션은 동기화된 컬렉션보다 더 나은
기능을 제공하며 스레드들이 컬렉션을 공유하지 않는
프로그램에서는 일반적으로 ArraryList 를  Vector 보다
더 선호하며 ArrayList 는 " 동기화를 고려하지 않는
Vector 처럼 동기화 함으로써 스레드 동기화에
따르는 부담을 가지지 않기 때문에 Vector 보다
더 빠르게 실행된다.
===== ArrayList 와 배열(Array) 의 차이 =====
[배열]
1. 선언 :
	String[] arr = new String[10];
2. 길이 :
	arr.length
3. 추가 :
	arr[i] = "샘플"
4. 삭제 :
	arr[i] = null;
5. 검색 :
	boolean flag = false;
	for(String str : arr){
		if("검색어".equal(str)){
			flag = true;
			break;
			}
		}
		
[ArrayList]
1. 선언 :
	List<String> list = new ArrayList<String>();
2. 길이 :
	list.size();
3. 추가 :
	list.add("샘플");
4. 삭제 :
	list.remove(1) // 인덱스
5. 찾기 :
	list.contains("샘플");

====== 컬렉션 인터페이스 Big 3 ======
List : 순서 O, 중복 O
	ArrayList(add),
	Vector(add),
	Stack(push / pop),
	LinkedList
Set : 순서 X, 중복 X
	HashSet, TreeSet
Map : 순서 X, 키중복 X, 값중복 O
	키는 Set 타입 반환
	값은 Collection 타입 반환
	HashMap(put),
	TreeMap, HashTable, Properties
